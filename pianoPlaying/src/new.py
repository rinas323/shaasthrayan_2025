import pygame
import time
import cv2
import mediapipe as mp

# Initialize pygame mixer
pygame.mixer.init()

# Define a function to play sound
def play_sound(sound_file):
    # Load a sound (make sure to provide a valid path to a sound file on your system)
    sound = pygame.mixer.Sound(sound_file)  # Use the corresponding sound file
    sound.play()

# Define the area to check (example values)
y_min = 200  # Minimum y value of the ankle area
y_max = 300  # Maximum y value of the ankle area

# Group 1: Coordinates for Staircase 1
ankle_data_staircase1 = [
    (269, 270), (270, 270), (270, 270), (270, 270), (270, 270),
    (270, 271), (270, 271), (270, 270), (270, 270), (270, 270),
    (270, 271), (270, 271), (270, 271), (270, 271), (270, 271),
    (270, 271), (270, 271), (270, 271), (271, 271), (271, 271),
    (271, 271), (271, 271), (271, 271), (271, 271), (271, 271),
    (271, 271), (271, 271), (271, 271), (271, 271), (271, 271),
    (271, 271), (271, 271), (271, 271), (271, 271), (271, 271),
    (271, 271), (271, 271), (271, 271), (270, 271), (270, 271),
    (270, 271), (270, 271), (270, 271), (270, 271), (270, 271),
    (269, 271), (269, 271), (269, 271), (269, 271), (269, 271),
    (269, 270), (270, 271), (270, 272), (270, 273), (270, 274),
    (270, 274), (270, 274), (270, 274), (270, 274), (272, 274),
    (273, 274), (271, 272), (272, 272), (272, 272), (273, 273),
    (274, 273), (274, 273), (274, 273), (274, 275), (273, 276),
    (271, 276), (271, 276), (270, 276), (269, 275), (270, 275),
    (270, 275), (272, 275), (272, 275), (272, 275), (272, 274),
    (272, 274), (273, 275), (274, 276), (274, 276), (274, 276),
    (274, 277), (274, 277), (275, 277), (275, 279), (273, 279),
    (273, 279), (272, 279), (272, 279), (272, 278), (273, 280),
    (276, 279), (278, 279), (277, 276), (277, 275), (274, 274),
    (274, 274), (274, 274), (274, 275), (273, 274), (272, 275),
    (271, 275), (271, 275), (271, 277), (272, 277), (274, 277),
    (275, 275), (275, 274), (275, 273), (275, 272), (274, 272),
    (273, 272), (272, 272), (273, 272), (273, 272), (272, 272),
    (272, 272), (274, 274), (274, 274), (274, 274), (275, 277),
    (277, 277), (278, 277), (278, 277), (278, 276), (277, 274),
    (276, 274), (275, 273), (275, 273), (274, 273), (274, 273),
    (275, 274), (276, 274), (276, 274), (276, 274), (276, 274),
    (276, 274), (276, 274), (276, 273), (276, 274), (275, 273),
    (275, 274), (275, 274), (275, 274), (275, 274), (275, 272),
    (271, 266), (270, 265), (270, 266), (271, 270), (271, 271),
    (273, 273), (274, 273), (274, 273), (274, 273), (274, 273),
    (273, 273), (273, 273), (273, 273), (273, 273), (273, 273),
    (273, 273), (273, 273), (273, 272), (274, 271), (276, 270),
    (277, 271), (276, 272), (276, 275), (276, 275), (275, 275),
    (275, 275), (271, 275), (271, 274), (271, 273), (271, 273),
    (272, 273), (273, 273), (273, 273), (273, 272), (274, 273),
    (275, 273), (275, 273), (277, 276), (277, 276), (276, 277),
    (275, 278), (273, 277), (272, 276), (272, 275), (272, 275),
    (274, 275), (274, 275), (274, 274), (274, 274), (276, 273),
    (277, 274), (277, 278), (277, 278), (275, 278), (275, 278),
    (273, 277), (273, 277), (273, 276), (274, 276), (275, 276),
    (275, 276), (276, 274), (276, 273), (276, 273), (277, 273),
    (278, 279), (278, 279), (276, 279), (275, 279), (273, 278),
    (273, 278), (274, 278), (275, 278), (275, 277), (276, 277),
    (276, 276), (276, 276), (276, 277), (276, 277), (276, 279),
    (277, 280), (278, 280), (278, 280), (277, 280), (277, 280),
    (277, 279), (277, 279), (277, 279), (277, 279)
]

# Group 2: Coordinates for Staircase 2
ankle_data_staircase2 = [
        (281, 280), (281, 280), (281, 282), (281, 282), (281, 282),
    (278, 282), (277, 281), (277, 281), (279, 281), (279, 279),
    (279, 278), (279, 278), (279, 281), (279, 281), (279, 284),
    (278, 284), (275, 284), (274, 283), (274, 282), (274, 282),
    (275, 282), (275, 281), (276, 281), (277, 281), (279, 280),
    (280, 281), (282, 283), (284, 283), (285, 286), (285, 287),
    (284, 286), (284, 286), (284, 287), (284, 287), (282, 286),
    (281, 286), (280, 286), (280, 286), (281, 286), (283, 285),
    (283, 285), (282, 283), (283, 283), (285, 285), (286, 287),
    (286, 288), (286, 288), (286, 288), (284, 287), (281, 287),
    (278, 285), (278, 285), (278, 283), (278, 282), (279, 282),
    (278, 282), (278, 282), (276, 282), (275, 281), (275, 281),
    (285, 281), (290, 281), (288, 281), (287, 278), (287, 278),
    (287, 278), (283, 278), (284, 283), (284, 283), (284, 284),
    (282, 284), (282, 285), (280, 285), (277, 286), (280, 287),
    (285, 287), (290, 287), (290, 284), (289, 281), (289, 281),
    (284, 278), (282, 278), (281, 279), (281, 281), (282, 282),
    (282, 284), (282, 284), (282, 285), (283, 285), (282, 284),
    (282, 284), (283, 280), (284, 279), (284, 279), (279, 281),
    (285, 281), (284, 281), (282, 283), (281, 283), (282, 281),
    (282, 280), (281, 280), (281, 280), (281, 280), (281, 279),
    (281, 279), (281, 280), (281, 280), (279, 280), (275, 280),
    (276, 280), (277, 279), (279, 279), (280, 279), (280, 279),
    (280, 279), (281, 279), (281, 279), (283, 279), (284, 280),
    (283, 282), (279, 282), (279, 283), (279, 283), (279, 283),
    (279, 283), (280, 283), (281, 283), (283, 281), (285, 280),
    (287, 280), (288, 280), (287, 283), (287, 284), (285, 284),
    (285, 285), (284, 285), (279, 283), (279, 282), (280, 283),
    (280, 283), (281, 282), (281, 278), (281, 278), (281, 278),
    (282, 279), (282, 283), (282, 285), (281, 285), (280, 285),
    (277, 283), (277, 282), (279, 282), (280, 282), (279, 281),
    (281, 281), (283, 281), (283, 281), (283, 284), (284, 288),
    (283, 288), (281, 288), (278, 285), (277, 283), (278, 283),
    (278, 284), (282, 285), (283, 286), (284, 286), (284, 286)
]

# Group 3: Coordinates for Staircase 3
ankle_data_staircase3 = [
    (283, 284), (283, 284), (283, 284), (283, 284), (282, 284),
    (282, 284), (282, 284), (282, 284), (282, 284), (282, 284),
    (282, 284), (282, 284), (282, 284), (282, 284), (282, 284),
    (282, 284), (282, 284), (282, 284), (282, 284), (282, 284),
    (282, 284), (281, 284), (281, 284), (281, 284), (281, 284),
    (281, 284), (281, 284), (281, 284), (281, 284), (281, 284),
    (281, 284), (282, 284), (282, 284), (282, 284), (281, 284),
    (282, 284), (282, 283), (282, 283), (282, 283), (282, 283),
    (282, 283), (281, 283), (281, 283), (281, 283), (281, 283),
    (281, 283), (281, 283), (281, 283), (281, 283), (281, 283),
    (281, 283), (282, 283), (281, 283), (282, 283), (282, 283),
    (281, 283), (281, 283), (281, 283), (281, 283), (281, 283),
    (281, 283), (281, 283), (281, 283), (281, 283), (281, 283),
    (281, 283), (281, 283), (281, 283), (281, 283), (281, 283),
    (281, 283), (281, 283), (281, 283), (281, 283), (281, 283),
    (281, 283), (281, 283), (281, 283), (283, 284), (282, 284),
    (281, 284), (282, 284), (285, 284), (285, 285), (284, 284),
    (285, 284), (286, 284), (287, 284), (287, 285), (287, 288),
    (287, 289), (286, 292), (283, 291), (278, 291), (277, 290),
    (279, 290), (281, 290), (284, 289), (284, 287), (284, 286),
    (284, 286), (284, 286), (284, 286), (285, 287), (285, 286),
    (286, 286), (287, 287), (289, 287), (294, 290), (293, 290),
    (292, 292), (292, 294), (291, 293), (291, 294), (291, 293),
    (291, 293), (291, 293), (291, 293), (292, 292), (292, 291),
    (292, 291), (292, 291), (292, 290), (290, 289), (289, 287),
    (289, 288), (291, 289), (289, 288), (279, 287), (279, 286),
    (280, 286), (281, 287), (286, 285), (286, 286), (286, 286),
    (286, 286), (286, 284), (286, 285), (285, 285), (285, 285),
    (285, 285), (285, 286), (285, 286), (285, 286), (285, 286),
    (285, 286), (285, 288), (289, 291), (289, 292), (288, 294),
    (288, 293), (291, 294), (292, 294), (293, 292), (293, 290),
    (293, 287), (292, 287), (289, 288), (288, 288), (287, 288),
    (287, 288), (287, 288), (287, 289), (287, 289), (283, 289),
    (282, 290), (283, 291), (288, 295), (289, 296), (289, 293),
    (289, 292), (289, 285), (285, 285), (282, 286), (279, 286),
    (279, 285), (279, 285), (280, 285), (280, 285), (280, 285),
    (280, 285), (281, 285), (280, 284), (280, 284), (281, 284),
    (280, 281), (280, 281), (283, 281), (283, 282), (285, 282),
    (287, 287), (286, 290), (281, 291), (282, 290), (282, 290),
    (282, 290), (282, 289), (282, 287), (282, 285), (282, 284),
    (282, 284), (282, 284), (282, 283), (282, 283), (282, 283),
    (283, 284), (283, 284), (283, 284), (284, 284), (284, 284),
    (283, 284), (283, 285), (283, 286), (283, 286), (284, 286),
    (284, 286), (284, 286), (284, 286), (284, 286), (284, 286),
    (284, 286), (284, 286), (284, 286), (285, 286)
]

# List of groups with their corresponding sounds
ankle_groups = [
    {'coordinates': ankle_data_staircase1, 'sound': 'a4.mp3'},  # Replace with your sound file paths
    {'coordinates': ankle_data_staircase2, 'sound': 'b4.mp3'},
    {'coordinates': ankle_data_staircase3, 'sound': 'c4.mp3'}
]

# Initialize MediaPipe Pose model
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5)
mp_drawing = mp.solutions.drawing_utils

# Set up webcam
cap = cv2.VideoCapture(1)

# Main loop to capture frames and process them
while True:
    # Capture frame-by-frame
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame.")
        break

    # Convert the frame to RGB for Mediapipe
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Process the frame with the Pose model
    results = pose.process(rgb_frame)

    # Check if landmarks were detected
    if results.pose_landmarks:
        # Draw the pose landmarks on the frame (optional, for visualization)
        mp_drawing.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        # Get the y-coordinates of the left and right ankles (Landmarks 29 and 30 for left and right ankles)
        left_ankle = results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ANKLE]
        right_ankle = results.pose_landmarks.landmark[mp_pose.PoseLandmark.RIGHT_ANKLE]

        # Convert normalized coordinates to pixel coordinates
        height, width, _ = frame.shape
        left_ankle_y = int(left_ankle.y * height)
        right_ankle_y = int(right_ankle.y * height)

        # Print ankle coordinates (optional)
        print(f"Left ankle y: {left_ankle_y}, Right ankle y: {right_ankle_y}")

        # Check if both ankles' y-values are within the defined area
        if y_min <= left_ankle_y <= y_max and y_min <= right_ankle_y <= y_max:
            # Check each group of ankle coordinates to see if there's a match
            for group in ankle_groups:
                if (left_ankle_y, right_ankle_y) in group['coordinates']:
                    print(f"Ankle coordinates match for {group['sound']}! Playing sound.")
                    play_sound(group['sound'])
                    time.sleep(1)  # Wait 1 second before checking the next values

    # Display the captured frame in a window (optional)
    cv2.imshow("Webcam", frame)

    # Exit loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the webcam and close OpenCV windows
cap.release()
cv2.destroyAllWindows()
